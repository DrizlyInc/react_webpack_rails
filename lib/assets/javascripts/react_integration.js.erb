var __RWR_ENV__ = {
  name: "<%=Rails.env%>",
  config: <%=JSON(Rails.application.config.react.shared)%>
};

function deprecatedError(helperName) {
  var lines = [
    helperName + ' was removed.',
    'use RWR.' + helperName + ' instead.',
    'check react_webpack_rails changelog for details.'
  ]
  console.error(lines.join("\n"));
}

function registerComponent() {
  deprecatedError('registerComponent');
}

function getComponent() {
  deprecatedError('getComponent');
}

function createComponent() {
  deprecatedError('createComponent');
}

function renderComponent() {
  deprecatedError('renderComponent');
}

function unmountComponent() {
  deprecatedError('unmountComponent');
}

function renderRouter() {
  deprecatedError('renderRouter');
}

function registerRouter() {
  deprecatedError('registerRouter');
}

function unmountRouter() {
  deprecatedError('unmountRouter');
}

function getRouter() {
  deprecatedError('getRouter');
}

var RWRhandlers = {
  _mountNodes: function _mountNodes() {
    RWR.mountNodes();
  },

  _unmountNodes: function _unmountNodes() {
    RWR.unmountNodes();
  },

  _handleEvent: function(eventName, callback) {
    document.addEventListener(eventName, callback);
  },

  handleTurbolinksEvents: function handleTurbolinksEvents() {
    var unmountEvent;

    if (Turbolinks.EVENTS) {
      unmountEvent = Turbolinks.EVENTS.BEFORE_UNLOAD;
    } else {
      unmountEvent = 'page:receive';
      Turbolinks.pagesCached(0);
    }
    RWRhandlers._handleEvent('page:change', RWRhandlers._mountNodes);
    RWRhandlers._handleEvent(unmountEvent, RWRhandlers._unmountNodes);
  },

  handleNativeEvents: function handleNativeEvents() {
    document.addEventListener('DOMContentLoaded', RWRhandlers._mountNodes);
  },
};

(function reactMain() {
  if (typeof Turbolinks !== 'undefined' && Turbolinks.supported) {
    RWRhandlers.handleTurbolinksEvents();
  } else {
    RWRhandlers.handleNativeEvents();
  }
})(document, window);
