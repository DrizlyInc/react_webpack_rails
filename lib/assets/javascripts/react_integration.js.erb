/*globals React, Turbolinks*/

// from https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb
// Unobtrusive scripting adapter for React
;(function(document, window) {
  // jQuery is optional. Use it to support legacy browsers.
  var $ = (typeof window.jQuery !== 'undefined') && window.jQuery;

  // create the  namespace
  window.ReactRailsUJS = {
    CLASS_NAME_ATTR: 'data-react-class',
    PROPS_ATTR: 'data-react-props',
    ROUTER_FLAG: 'data-react-router',
    RAILS_ENV_DEVELOPMENT: <%= Rails.env == "development" %>,
    reactComponents: {},
    reactRouters: {},
    // helper method for the mount and unmount methods to find the
    // `data-react-class` DOM elements
    _findDOMNodes: function(searchSelector) {
      // we will use fully qualified paths as we do not bind the callbacks
      var selector;
      if (typeof searchSelector === 'undefined') {
        var selector = '[' + window.ReactRailsUJS.CLASS_NAME_ATTR + ']';
      } else {
        var selector = searchSelector + ' [' + window.ReactRailsUJS.CLASS_NAME_ATTR + ']';
      }

      if ($) {
        return $(selector);
      } else {
        return document.querySelectorAll(selector);
      }
    },

    registerComponent: function (name, component) {
      window.ReactRailsUJS.reactComponents[name] = component;
    },

    getComponent: function(name) {
      return window.ReactRailsUJS.reactComponents[name];
    },

    createComponent: function (name, props) {
      var constructor = window.ReactRailsUJS.getComponent(name);
      return React.createElement(constructor, props);
    },

    renderComponent: function (name, props, element) {
      var component = window.ReactRailsUJS.createComponent(name, props);
      React.render(component, element);
    },

    unmountComponent: function (node) {
      React.unmountComponentAtNode(node);
    },

    registerRouter: function(name, routes) {
      window.ReactRailsUJS.reactRouters[name] = routes;
    },

    getRouter: function(name) {
      return window.ReactRailsUJS.reactRouters[name];
    },

    renderRouter: function(name, element) {
      if(window.ReactRailsUJS.routerEnabled == true){
        throw new Error("Error when renering " + name + "router: can't render more than one router.")
      }
      window.ReactRailsUJS.routerEnabled = true;
      var router = window.ReactRailsUJS.getRouter(name);
      React.render(router, element);
    },

    mountComponents: function(searchSelector) {
      var nodes = window.ReactRailsUJS._findDOMNodes(searchSelector);

      for (var i = 0; i < nodes.length; ++i) {
        var node = nodes[i];
        var className = node.getAttribute(window.ReactRailsUJS.CLASS_NAME_ATTR);
        var propsJson = node.getAttribute(window.ReactRailsUJS.PROPS_ATTR);
        try {
          var isRouter = JSON.parse(node.getAttribute(window.ReactRailsUJS.ROUTER_FLAG));
        } catch(error) {
          var isRouter = false
        }
        var props = propsJson && JSON.parse(propsJson);
        if (isRouter) {
          window.ReactRailsUJS.renderRouter(className, node)
        } else {
          window.ReactRailsUJS.renderComponent(className, props, node)
        }
      }
    },

    unmountComponents: function(searchSelector) {
      var nodes = window.ReactRailsUJS._findDOMNodes(searchSelector);
      window.ReactRailsUJS.routerEnabled = false;
      for (var i = 0; i < nodes.length; ++i) {
        var node = nodes[i];
        window.ReactRailsUJS.unmountComponent(node);
      }
    }
  };

  // expose helpers globally
  window.registerComponent = ReactRailsUJS.registerComponent;
  window.getComponent = ReactRailsUJS.getComponent;
  window.createComponent = ReactRailsUJS.createComponent;
  window.renderComponent = ReactRailsUJS.renderComponent;
  window.unmountComponent = ReactRailsUJS.unmountComponent;

  window.registerRouter = ReactRailsUJS.registerRouter;
  window.getRouter = ReactRailsUJS.getRouter;
  window.renderRouter = ReactRailsUJS.renderRouter;

  // functions not exposed publicly
  function handleTurbolinksEvents () {
    var handleEvent;
    var unmountEvent;

    if ($) {
      handleEvent = function(eventName, callback) {
        $(document).on(eventName, callback);
      };

    } else {
      handleEvent = function(eventName, callback) {
        document.addEventListener(eventName, callback);
      };
    }

    if (Turbolinks.EVENTS) {
      unmountEvent = Turbolinks.EVENTS.BEFORE_UNLOAD;
    } else {
      unmountEvent = 'page:receive';
      Turbolinks.pagesCached(0);

      if (window.ReactRailsUJS.RAILS_ENV_DEVELOPMENT) {
        console.warn('The Turbolinks cache has been disabled (Turbolinks >= 2.4.0 is recommended). See https://github.com/reactjs/react-rails/issues/87 for more information.');
      }
    }
    handleEvent('page:change', function() {window.ReactRailsUJS.mountComponents()});
    handleEvent(unmountEvent, function() {window.ReactRailsUJS.unmountComponents()});
  }

  function handleNativeEvents() {
    if ($) {
      $(function() {window.ReactRailsUJS.mountComponents()});
    } else {
      document.addEventListener('DOMContentLoaded', function() {window.ReactRailsUJS.mountComponents()});
    }
  }

  if (typeof Turbolinks !== 'undefined' && Turbolinks.supported) {
    handleTurbolinksEvents();
  } else {
    handleNativeEvents();
  }
})(document, window);
